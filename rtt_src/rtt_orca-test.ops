#!/usr/bin/env deployer

import("orca")
import("eigen_typekit")

var string urdf = "/home/hoarau/isir/orca_ws/src/orca/examples/lwr/lwr.urdf"
var string base_frame = "link_0"
var eigen_vector gravity = array(0.0, 0.0, -9.81)

loadComponent("regx","rtt_orca::task::RttRegularisationTask<orca::optim::ControlVariable::X>")
setActivity("regx",1.0,10,ORO_SCHED_RT)
regx.robot_model.loadModelFromFile(urdf)
regx.robot_model.setBaseFrame(base_frame)
regx.robot_model.setGravity(gravity)
regx.configure()
regx.insertInProblem()
regx.start()

// loadComponent("contact1","rtt_orca::constraint::RttContact")
// setActivity("contact1",1.0,10,ORO_SCHED_RT)
// contact1.robot_model.loadModelFromFile(urdf)
// contact1.robot_model.setBaseFrame(base_frame)
// contact1.setContactFrame("link_6")
// contact1.robot_model.print()
// contact1.configure()
// contact1.start()
// 
// loadComponent("contact2","rtt_orca::constraint::RttContact")
// setActivity("contact2",0.5,10,ORO_SCHED_RT)
// contact2.robot_model.loadModelFromFile(urdf)
// contact2.robot_model.setBaseFrame(base_frame)
// contact2.setContactFrame("link_7")
// contact2.robot_model.print()
// contact2.configure()
// contact2.start()

loadComponent("dyneq","rtt_orca::constraint::RttDynamicsEquationConstraint")
setActivity("dyneq",0.01,10,ORO_SCHED_RT)
dyneq.robot_model.loadModelFromFile(urdf)
dyneq.robot_model.setBaseFrame(base_frame)
dyneq.robot_model.setBaseFrame(base_frame)
regx.robot_model.setGravity(gravity)
dyneq.robot_model.print()
dyneq.configure()
dyneq.insertInProblem()
dyneq.start()

loadComponent("qp","rtt_orca::optim::RttQPSolver<orca::optim::WeightedQPSolver>")
setActivity("qp",0.5,10,ORO_SCHED_RT)
qp.configure()
qp.start()